Note: In Index.css we setup global body style since rendor starts from Index.js and we import it in Index.js
//To change font-family from imported fonts from google -> Public -> Index.html
//We will use component to manage state and container for everything else
//<main> Tag is used to showcase main content
//IF we have two adjacent jsx element (we can't have), We have to use array and give each item a key
//Another alternate is create HOC -> It will server purpose of wrapping something and passing function
//Question to ask, Why didn't we used div?
https://www.udemy.com/react-the-complete-guide-incl-redux/learn/v4/t/lecture/8109010?start=0
//if we import react, can we use jsx anywhere?
//we can also add state using constructor(Props), super(props); this.state (this because we are inside a method)
//Burger project lecture 11 to know how to pass states to functional component
https://www.udemy.com/react-the-complete-guide-incl-redux/learn/v4/questions/3956582
https://www.udemy.com/react-the-complete-guide-incl-redux/learn/v4/questions/4316856

//Question.
//When we console.log(typeof array) -> Does it always logs it as an object




//Lecture 5
//Css -> Npm run eject -> webpack -> Options
//Removed logo
//Removed most of the content from App.js
//Index.css change font
//removed App.css
//-------------------
//-------------------
//-------------------



//lecture 6
//We can seperate our project into two parts
//Toolbar to navigate and the main burger builder
//We create a sub folder for layout
//We created Component and container -> we will create container in components because we don't need to manage any state
//In components -> Sub folder -> Layout -> in layout , layout.js file
//We create assests folder
//In layout.js, we use *main and there we will put component we will wrap with this content -> hence we will use props.children
//*We use this component as a wrapper around the core content component we want to render to the screen
//Now in main.js,we want have two adjacent element but since we cannot have two adjacet JSX element together, we create HOC named Aux
//Aux is simple -> Takes props and return props
//We import Aux to our Layout and layout to app
//Run the app afterwards
//-------------------
//-------------------
//-------------------


//Lecture 7
//Starting the implementation of the burger builder
//---x-x----x--x---
//This should actually be a container because here we need to manage the state of burger
//We created a new folder in container known as burger Builder
//Burger Builder contains Burger and Burger Controls
//We wrap it with Aux like we wrapped layout
//We imported it to App.js
//We wrapped it inside layout.js, Since we wrapped it inside Layout.js, We could add styling in Layout.css which will effect it since we are passing props.children
//We created layout.csss and added maegin of 16px
//Overflow: Scroll -> We can scroll it
//-------------------
//-------------------
//-------------------


//Lecture 8
//Adding DYnamic ingredient components
//---x----x-----x---
//We would add burger needed component and ingredients
//We added the CSS provided to us by Max
//We created Burger-ingredient cascade Style sheet and Burger-ingrident.js
//Now there would be different ingridents which we tend to send from Burger.js from props
//In burger-Ingrident.js file, we create a functional component and import react since we are going to use jsx
//We created a ingrident variable and set it as value to null because we don't want any invalid Value to be passed (more like let ingrident;) -> We won't render anything
//In Switch statement we do props.type -> type is the property we expect to receive -> based on the type we receive will use the case
//-------------------
//-------------------
//-------------------


//Lecture 9
//Props Valiadtion
//--x--x----x--
//Added Props Validation
//-------------------
//-------------------
//-------------------


//Lecture 10
//Starting the burger Component
//---x----x---
//In burger.js, we created a functional component which receives some props
//we imported react and BurgerIngredients.js
//We added types under <BurgerIngredients which will passed as props.type to our BurgerIngredients.js
//we created burger.css and added some css and media query
//All the props are static and added manually they look like this   <BurgerIngredients type="bread-top"/> <BurgerIngredients type="meat"/> and wrapped everything with div and added our own styling
//Since we are using switch statement > as we pass props.type > it will forward this to switch and hence display it
//We imported this to container > burger Builder > burger Builder.js
//-------------------
//-------------------
//-------------------


Lecture 11
//Outputting burger ingredient Dynamically
//----x-----x----
//We will add state, state is an object (in max tutorial) -> max
//We pass this array to burger Ingredients through  <Burger ingredient={this.state.ingrident}/> and convert this object to array using Object.keys
//Then we will use 1st map to find the property of the associated objected for example salad:1 -> we will find the property, which is one here -> this is done through
return [...Array(props.ingredient[igKey])] -> This will return a single empty array in case of 1, two empty array in case of 2 and so on..
will map this return and pass in the value of the string which will get as loop progress, this value is pushed in as form of JSX to form an Array
//SInce we are using one variable here, transformedIngrident, we use JSx to insert our value by doing something like this in return {transformedIngrident}

-----Max code alternate classical simplified version----

////Max code for the above logic
//-----
let transformedIngrident = Object.keys(props.ingredient) //["salad", "bacon", "cheese", "meat"]
transformedIngrident = transformedIngrident.map(igKey => { //igKey will pass string which will be mapped like salad then bacon then cheese and then meat

//This will tell the value corresponding to the give string of object for example in case of Salad it will show 1

//[undefined] -> This is because we have  one salad in Ingridents
//[undefined] -> This is because we have  one bacon
//[undefined, undefined, undefined] This is because we have  3 bacon
//[undefined, undefined] This is because we have two meat
  return [...Array(props.ingredient[igKey])].map((_, i) => {
    console.log(transformedIngrident)
      return <BurgerIngredients type={igKey} key={i} />
  //This will first create an empty array and the map used second time will map each ingrident into it with type and key
  })
})

////My Logic
//------
let transformedIngrident = Object.keys(props.ingredient)
var DisplayIngre = [] //this should be an array
var i;
var j;

for (i=0; i<transformedIngrident.length; i++){
  let keyValue = props.ingredient[transformedIngrident[i]]
  let igKey = transformedIngrident[i]
    for ( j=0; j<keyValue; j++) {
DisplayIngre.push(<BurgerIngredients type={igKey} key={i+j} />);
  }
}

//-------------------
//-------------------
//-------------------


//Calculating the ingredient sum dynamically
